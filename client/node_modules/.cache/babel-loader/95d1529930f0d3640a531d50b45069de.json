{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _RedditContent = require('./RedditContent.js');\n\nvar _RedditContent2 = _interopRequireDefault(_RedditContent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* @summary A class representing a multireddit.\n* <style> #MultiReddit {display: none} </style>\n* @example\n*\n* // Get a multireddit belonging to a specific user\n* r.getUser('multi-mod').getMultireddit('coding_languages')\n*/\n\n\nvar MultiReddit =\n/*#__PURE__*/\nfunction (_RedditContent2$defau) {\n  _inherits(MultiReddit, _RedditContent2$defau);\n\n  function MultiReddit(options, _r, _hasFetched) {\n    var _this4;\n\n    _classCallCheck(this, MultiReddit);\n\n    var _this;\n\n    _this = _this4 = _possibleConstructorReturn(this, _getPrototypeOf(MultiReddit).call(this, options, _r, _hasFetched));\n\n    if (_hasFetched) {\n      _this4.curator = _r.getUser(_this4.path.split('/')[2]);\n      _this4.subreddits = _this4.subreddits.map(function (item) {\n        return _this._r._newObject('Subreddit', item.data || {\n          display_name: item.name\n        });\n      });\n    }\n\n    return _this4;\n  }\n\n  _createClass(MultiReddit, [{\n    key: \"copy\",\n\n    /**\n    * @summary Copies this multireddit to the requester's own account.\n    * @param {object} options\n    * @param {string} options.newName The new name for the copied multireddit\n    * @returns {Promise} A Promise for the newly-copied multireddit\n    * @example r.getUser('multi-mod').getMultireddit('coding_languages').copy({newName: 'my_coding_languages_copy'})\n    */\n    value: function copy(_ref) {\n      var _this2 = this;\n\n      var new_name = _ref.new_name,\n          _ref$newName = _ref.newName,\n          newName = _ref$newName === undefined ? new_name : _ref$newName;\n      return this._r._getMyName().then(function (name) {\n        return _this2._post({\n          uri: 'api/multi/copy',\n          form: {\n            from: _this2._path,\n            to: '/user/' + name + '/m/' + newName,\n            display_name: newName\n          }\n        });\n      });\n    }\n    /**\n    * @summary Renames this multireddit.\n    * @desc **Note**: This method mutates this MultiReddit.\n    * @param {object} options\n    * @param {string} options.newName The new name for this multireddit.\n    * @returns {Promise} A Promise that fulfills with this multireddit\n    * @example r.getUser('multi-mod').getMultireddit('coding_languages').copy({newName: 'cookie_languages '})\n    */\n\n  }, {\n    key: \"rename\",\n    value: function rename(_ref2) {\n      var _this3 = this;\n\n      var new_name = _ref2.new_name,\n          _ref2$newName = _ref2.newName,\n          newName = _ref2$newName === undefined ? new_name : _ref2$newName;\n      return this._r._getMyName().then(function (name) {\n        return _this3._post({\n          uri: 'api/multi/rename',\n          form: {\n            from: _this3._path,\n            to: '/user/' + name + '/m/' + newName,\n            display_name: newName\n          }\n        });\n      }).then(function (res) {\n        _this3.name = res.name;\n      }).return(this);\n    }\n    /**\n    * @summary Edits the properties of this multireddit.\n    * @desc **Note**: Any omitted properties here will simply retain their previous values.\n    * @param {object} options\n    * @param {string} [options.name] The name of the new multireddit. 50 characters max\n    * @param {string} [options.description] A description for the new multireddit, in markdown.\n    * @param {string} [options.visibility] The multireddit's visibility setting. One of `private`, `public`, `hidden`.\n    * @param {string} [options.icon_name] One of `art and design`, `ask`, `books`, `business`, `cars`, `comics`, `cute animals`,\n    `diy`, `entertainment`, `food and drink`, `funny`, `games`, `grooming`, `health`, `life advice`, `military`, `models pinup`,\n    `music`, `news`, `philosophy`, `pictures and gifs`, `science`, `shopping`, `sports`, `style`, `tech`, `travel`,\n    `unusual stories`, `video`, `None`\n    * @param {string} [options.key_color] A six-digit RGB hex color, preceded by '#'\n    * @param {string} [options.weighting_scheme] One of 'classic', 'fresh'\n    * @returns {Promise} The updated version of this multireddit\n    * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').edit({visibility: 'hidden'})\n    */\n\n  }, {\n    key: \"edit\",\n    value: function edit(_ref3) {\n      var description = _ref3.description,\n          icon_name = _ref3.icon_name,\n          key_color = _ref3.key_color,\n          visibility = _ref3.visibility,\n          weighting_scheme = _ref3.weighting_scheme;\n      return this._put({\n        uri: 'api/multi' + this._path,\n        form: {\n          model: JSON.stringify({\n            description_md: description,\n            display_name: this.name,\n            icon_name: icon_name,\n            key_color: key_color,\n            visibility: visibility,\n            weighting_scheme: weighting_scheme\n          })\n        }\n      });\n    }\n    /**\n    * @summary Adds a subreddit to this multireddit.\n    * @param {Subreddit} sub The Subreddit object to add (or a string representing a subreddit name)\n    * @returns {Promise} A Promise that fulfills with this multireddit when the reuqest is complete\n    * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').addSubreddit('cookies')\n    */\n\n  }, {\n    key: \"addSubreddit\",\n    value: function addSubreddit(sub) {\n      sub = typeof sub === 'string' ? sub : sub.display_name;\n      return this._put({\n        uri: 'api/multi' + this._path + '/r/' + sub,\n        form: {\n          model: JSON.stringify({\n            name: sub\n          })\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Removes a subreddit from this multireddit.\n    * @param {Subreddit} sub The Subreddit object to remove (or a string representing a subreddit name)\n    * @returns {Promise} A Promise that fulfills with this multireddit when the request is complete\n    * @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').removeSubreddit('cookies')\n    */\n\n  }, {\n    key: \"removeSubreddit\",\n    value: function removeSubreddit(sub) {\n      return this._delete({\n        uri: 'api/multi' + this._path + '/r/' + (typeof sub === 'string' ? sub : sub.display_name)\n      }).return(this);\n    }\n    /* Note: The endpoints GET/PUT /api/multi/multipath/description and GET /api/multi/multipath/r/srname are intentionally not\n    included, because they're redundant and the same thing can be achieved by simply using fetch() and edit(). */\n\n  }, {\n    key: \"_uri\",\n    get: function get() {\n      return 'api/multi' + this._path + '?expand_srs=true';\n    }\n  }, {\n    key: \"_path\",\n    get: function get() {\n      return '/user/' + this.curator.name + '/m/' + this.name;\n    }\n  }]);\n\n  return MultiReddit;\n}(_RedditContent2.default); // MultiReddit#delete is not in the class body since Safari 9 can't parse the `delete` function name in class bodies.\n\n/**\n* @function\n* @name delete\n* @summary Deletes this multireddit.\n* @returns {Promise} A Promise that fulfills when this request is complete\n* @example r.getUser('not_an_aardvark').getMultireddit('cookie_languages').delete()\n* @memberof MultiReddit\n* @instance\n*/\n\n\nObject.defineProperty(MultiReddit.prototype, 'delete', {\n  value: function value() {\n    return this._delete({\n      uri: 'api/multi' + this._path\n    });\n  },\n  configurable: true,\n  writable: true\n});\nexports.default = MultiReddit;","map":null,"metadata":{},"sourceType":"script"}