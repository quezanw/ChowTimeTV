{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _helpers = require('../helpers.js');\n\nvar _VoteableContent = require('./VoteableContent.js');\n\nvar _VoteableContent2 = _interopRequireDefault(_VoteableContent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar api_type = 'json';\n/**\n* A class representing a reddit submission\n* <style> #Submission {display: none} </style>\n* @extends VoteableContent\n* @example\n*\n* // Get a submission by ID\n* r.getSubmission('2np694')\n*/\n\nvar Submission =\n/*#__PURE__*/\nfunction (_VoteableContent2$def) {\n  _inherits(Submission, _VoteableContent2$def);\n\n  function Submission(data, _r, _hasFetched) {\n    var _this3;\n\n    _classCallCheck(this, Submission);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Submission).call(this, data, _r, _hasFetched));\n\n    if (_hasFetched) {\n      _this3.comments = _this3.comments || (0, _helpers.getEmptyRepliesListing)(_assertThisInitialized(_assertThisInitialized(_this3)));\n    }\n\n    return _this3;\n  }\n\n  _createClass(Submission, [{\n    key: \"hide\",\n\n    /**\n    * @summary Hides this Submission, preventing it from appearing on most Listings.\n    * @returns {Promise} The updated version of this Submission\n    * @example r.getSubmission('2np694').hide()\n    */\n    value: function hide() {\n      return this._post({\n        uri: 'api/hide',\n        form: {\n          id: this.name\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Unhides this Submission, allowing it to reappear on most Listings.\n    * @returns {Promise} The updated version of this Submission\n    * @example r.getSubmission('2np694').unhide()\n    */\n\n  }, {\n    key: \"unhide\",\n    value: function unhide() {\n      return this._post({\n        uri: 'api/unhide',\n        form: {\n          id: this.name\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Locks this Submission, preventing new comments from being posted on it.\n    * @returns {Promise} The updated version of this Submission\n    * @example r.getSubmission('2np694').lock()\n    */\n\n  }, {\n    key: \"lock\",\n    value: function lock() {\n      return this._post({\n        uri: 'api/lock',\n        form: {\n          id: this.name\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Unlocks this Submission, allowing comments to be posted on it again.\n    * @returns {Promise} The updated version of this Submission\n    * @example r.getSubmission('2np694').unlock()\n    */\n\n  }, {\n    key: \"unlock\",\n    value: function unlock() {\n      return this._post({\n        uri: 'api/unlock',\n        form: {\n          id: this.name\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Marks this Submission as NSFW (Not Safe For Work).\n    * @returns {Promise} The updated version of this Submission\n    * @example r.getSubmission('2np694').markNsfw()\n    */\n\n  }, {\n    key: \"markNsfw\",\n    value: function markNsfw() {\n      return this._post({\n        uri: 'api/marknsfw',\n        form: {\n          id: this.name\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Unmarks this Submission as NSFW (Not Safe For Work).\n    * @returns {Promise} The updated version of this Submission\n    * @example r.getSubmission('2np694').unmarkNsfw()\n    */\n\n  }, {\n    key: \"unmarkNsfw\",\n    value: function unmarkNsfw() {\n      return this._post({\n        uri: 'api/unmarknsfw',\n        form: {\n          id: this.name\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Mark a submission as a spoiler\n    * @desc **Note:** This will silently fail if the subreddit has disabled spoilers.\n    * @returns {Promise} A Promise that fulfills with this Submission when the request is complete\n    * @example r.getSubmission('2np694').markSpoiler()\n    */\n\n  }, {\n    key: \"markSpoiler\",\n    value: function markSpoiler() {\n      return this._post({\n        uri: 'api/spoiler',\n        form: {\n          id: this.name\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Unmark a submission as a spoiler\n    * @returns {Promise} A Promise that fulfills with this Submission when the request is complete\n    * @example r.getSubmission('2np694').unmarkSpoiler()\n    */\n\n  }, {\n    key: \"unmarkSpoiler\",\n    value: function unmarkSpoiler() {\n      return this._post({\n        uri: 'api/unspoiler',\n        form: {\n          id: this.name\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Sets the contest mode status of this submission.\n    * @private\n    * @param {boolean} state The desired contest mode status\n    * @returns {Promise} The updated version of this Submission\n    */\n\n  }, {\n    key: \"_setContestModeEnabled\",\n    value: function _setContestModeEnabled(state) {\n      return this._post({\n        uri: 'api/set_contest_mode',\n        form: {\n          api_type: api_type,\n          state: state,\n          id: this.name\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Enables contest mode for this Submission.\n    * @returns {Promise} The updated version of this Submission\n    * @example r.getSubmission('2np694').enableContestMode()\n    */\n\n  }, {\n    key: \"enableContestMode\",\n    value: function enableContestMode() {\n      return this._setContestModeEnabled(true);\n    }\n    /**\n    * @summary Disables contest mode for this Submission.\n    * @returns {Promise} The updated version of this Submission\n    * @example r.getSubmission('2np694').disableContestMode()\n    */\n\n  }, {\n    key: \"disableContestMode\",\n    value: function disableContestMode() {\n      return this._setContestModeEnabled(false);\n    }\n  }, {\n    key: \"_setStickied\",\n    value: function _setStickied(_ref) {\n      var state = _ref.state,\n          num = _ref.num;\n      return this._post({\n        uri: 'api/set_subreddit_sticky',\n        form: {\n          api_type: api_type,\n          state: state,\n          num: num,\n          id: this.name\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Stickies this Submission.\n    * @param {object} [options]\n    * @param {number} [options.num=1] The sticky slot to put this submission in; this should be either 1 or 2.\n    * @returns {Promise} The updated version of this Submission\n    * @example r.getSubmission('2np694').sticky({num: 2})\n    */\n\n  }, {\n    key: \"sticky\",\n    value: function sticky() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref2$num = _ref2.num,\n          num = _ref2$num === undefined ? 1 : _ref2$num;\n\n      return this._setStickied({\n        state: true,\n        num: num\n      });\n    }\n    /**\n    * @summary Unstickies this Submission.\n    * @returns {Promise} The updated version of this Submission\n    * @example r.getSubmission('2np694').unsticky()\n    */\n\n  }, {\n    key: \"unsticky\",\n    value: function unsticky() {\n      return this._setStickied({\n        state: false\n      });\n    }\n    /**\n    * @summary Sets the suggested comment sort method on this Submission\n    * @desc **Note**: To enable contest mode, use {@link Submission#enableContestMode} instead.\n    * @param {string} sort The suggested sort method. This should be one of\n    `confidence, top, new, controversial, old, random, qa, blank`\n    * @returns {Promise} The updated version of this Submission\n    * @example r.getSubmission('2np694').setSuggestedSort('new')\n    */\n\n  }, {\n    key: \"setSuggestedSort\",\n    value: function setSuggestedSort(sort) {\n      return this._post({\n        uri: 'api/set_suggested_sort',\n        form: {\n          api_type: api_type,\n          id: this.name,\n          sort: sort\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Marks this submission as 'visited'.\n    * @desc **Note**: This function only works if the authenticated account has a subscription to reddit gold.\n    * @returns {Promise} The updated version of this Submission\n    * @example r.getSubmission('2np694').markAsRead()\n    */\n\n  }, {\n    key: \"markAsRead\",\n    value: function markAsRead() {\n      return this._post({\n        uri: 'api/store_visits',\n        form: {\n          links: this.name\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Gets a Listing of other submissions on reddit that had the same link as this one.\n    * @param {object} [options={}] Options for the resulting Listing\n    * @returns {Promise} A Listing of other Submission objects\n    * @example r.getSubmission('2np694').getDuplicates()\n    */\n\n  }, {\n    key: \"getDuplicates\",\n    value: function getDuplicates() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._getListing({\n        uri: 'duplicates/' + this.name.slice(3),\n        qs: options\n      });\n    }\n    /**\n    * @summary Gets a Listing of Submissions that are related to this one.\n    * @deprecated This function uses the <code>/related/submission_id</code> endpoint, which was recently changed on reddit.com;\n    instead of returning a Listing containing related posts, the reddit API now simply returns the post itself. As such, this\n    function only exists for backwards compatability and should not be used in practice.\n    * @param {object} [options={}] ~~Options for the resulting Listing~~\n    * @returns {Promise} ~~A Listing of other Submission objects~~ The submission in question.\n    * @example r.getSubmission('2np694').getRelated()\n    */\n\n  }, {\n    key: \"getRelated\",\n    value: function getRelated() {\n      var _this = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._getListing({\n        uri: 'related/' + this.name.slice(3),\n        qs: options\n      }).tap(function (result) {\n        if (result.constructor._name === 'Submission') {\n          _this._r._warn('Submission#getRelated has been deprecated upstream, and will not work as expected.');\n        }\n      });\n    }\n    /**\n    * @summary Gets a list of flair template options for this post.\n    * @returns {Promise} An Array of flair templates\n    * @example\n    *\n    * r.getSubmission('2np694').getLinkFlairTemplates().then(console.log)\n    *\n    * // => [\n    * //   { flair_text: 'Text 1', flair_css_class: '', flair_text_editable: false, flair_template_id: '(UUID not shown)' ... },\n    * //   { flair_text: 'Text 2', flair_css_class: 'aa', flair_text_editable: false, flair_template_id: '(UUID not shown)' ... },\n    * //   ...\n    * // ]\n    */\n\n  }, {\n    key: \"getLinkFlairTemplates\",\n    value: function getLinkFlairTemplates() {\n      var _this2 = this;\n\n      return this.fetch().get('subreddit').then(function (sub) {\n        return sub.getLinkFlairTemplates(_this2.name);\n      });\n    }\n    /**\n    * @summary Assigns flair on this Submission (as a moderator; also see [selectFlair]{@link Submission#selectFlair})\n    * @param {object} options\n    * @param {string} options.text The text that this link's flair should have\n    * @param {string} options.cssClass The CSS class that the link's flair should have\n    * @returns {Promise} A Promise that fulfills with an updated version of this Submission\n    * @example r.getSubmission('2np694').assignFlair({text: 'this is a flair text', cssClass: 'these are css classes'})\n    */\n\n  }, {\n    key: \"assignFlair\",\n    value: function assignFlair(options) {\n      return this._r._assignFlair(_extends({}, options, {\n        link: this.name,\n        subredditName: this.subreddit.display_name\n      })).return(this);\n    }\n    /**\n    * @summary Selects a flair for this Submission (as the OP; also see [assignFlair]{@link Submission#assignFlair})\n    * @param {object} options\n    * @param {string} options.flair_template_id A flair template ID to use for this Submission. (This should be obtained\n    beforehand using {@link getLinkFlairTemplates}.)\n    * @param {string} [options.text] The flair text to use for the submission. (This is only necessary/useful if the given flair\n    template has the `text_editable` property set to `true`.)\n    * @returns {Promise} A Promise that fulfills with this objects after the request is complete\n    * @example r.getSubmission('2np694').selectFlair({flair_template_id: 'e3340d80-8152-11e4-a76a-22000bc1096c'})\n    */\n\n  }, {\n    key: \"selectFlair\",\n    value: function selectFlair(options) {\n      return this._r._selectFlair(_extends({}, options, {\n        link: this.name,\n        subredditName: this.subreddit.display_name\n      })).return(this);\n    }\n    /**\n     * @summary Crossposts this submission to a different subreddit\n     * @desc **NOTE**: To create a crosspost, the authenticated account must be subscribed to the subreddit where\n     * the crosspost is being submitted, and that subreddit be configured to allow crossposts.\n     * @param {object} options An object containing details about the submission\n     * @param {string} options.subredditName The name of the subreddit that the crosspost should be submitted to\n     * @param {string} options.title The title of the crosspost\n     * @param {boolean} [options.sendReplies=true] Determines whether inbox replies should be enabled for this submission\n     * @param {boolean} [options.resubmit=true] If this is false and same link has already been submitted to this subreddit in\n     the past, reddit will return an error. This could be used to avoid accidental reposts.\n     * @returns {Promise} The newly-created Submission object\n     * @example\n     *\n     * await r.getSubmission('6vths0').submitCrosspost({ title: 'I found an interesting post', subredditName: 'snoowrap' })\n     */\n\n  }, {\n    key: \"submitCrosspost\",\n    value: function submitCrosspost(options) {\n      return this._r.submitCrosspost(_extends({}, options, {\n        originalPost: this\n      }));\n    }\n  }, {\n    key: \"_uri\",\n    get: function get() {\n      return 'comments/' + this.name.slice(3);\n    }\n  }]);\n\n  return Submission;\n}(_VoteableContent2.default);\n\nexports.default = Submission;","map":null,"metadata":{},"sourceType":"script"}