{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _RedditContent = require('./RedditContent.js');\n\nvar _RedditContent2 = _interopRequireDefault(_RedditContent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* A class representing a wiki page on a subreddit.\n*\n* **Note:** Due to a bug in reddit's CORS settings, it is not possible to fetch the contents of a wiki page on a private\nsubreddit while running snoowrap in a browser. (This issue does not apply when running snoowrap in Node.js.)\n*\n* <style> #WikiPage {display: none} </style>\n* @extends RedditContent\n* @example\n*\n* // Get a wiki page on a given subreddit by name\n* r.getSubreddit('AskReddit').getWikiPage('rules')\n*/\n\n\nvar WikiPage =\n/*#__PURE__*/\nfunction (_RedditContent2$defau) {\n  _inherits(WikiPage, _RedditContent2$defau);\n\n  function WikiPage() {\n    _classCallCheck(this, WikiPage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WikiPage).apply(this, arguments));\n  }\n\n  _createClass(WikiPage, [{\n    key: \"getSettings\",\n\n    /**\n    * @summary Gets the current settings for this wiki page.\n    * @returns {Promise} An Object representing the settings for this page\n    * @example\n    *\n    * r.getSubreddit('snoowrap').getWikiPage('index').getSettings().then(console.log)\n    * // => WikiPageSettings { permlevel: 0, editors: [], listed: true }\n    */\n    value: function getSettings() {\n      return this._get({\n        uri: 'r/' + this.subreddit.display_name + '/wiki/settings/' + this.title\n      });\n    }\n    /**\n    * @summary Edits the settings for this wiki page.\n    * @param {object} options\n    * @param {boolean} options.listed Determines whether this wiki page should appear on the public list of pages for this\n    subreddit.\n    * @param {number} options.permissionLevel Determines who should be allowed to access and edit this page `0` indicates that\n    this subreddit's default wiki settings should get used, `1` indicates that only approved wiki contributors on this subreddit\n    should be able to edit this page, and `2` indicates that only mods should be able to view and edit this page.\n    * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n    * @example r.getSubreddit('snoowrap').getWikiPage('index').editSettings({listed: false, permission_level: 1})\n    */\n\n  }, {\n    key: \"editSettings\",\n    value: function editSettings(_ref) {\n      var listed = _ref.listed,\n          permission_level = _ref.permission_level,\n          _ref$permissionLevel = _ref.permissionLevel,\n          permissionLevel = _ref$permissionLevel === undefined ? permission_level : _ref$permissionLevel;\n      return this._post({\n        uri: 'r/' + this.subreddit.display_name + '/wiki/settings/' + this.title,\n        form: {\n          listed: listed,\n          permlevel: permissionLevel\n        }\n      }).return(this);\n    }\n  }, {\n    key: \"_modifyEditor\",\n    value: function _modifyEditor(_ref2) {\n      var name = _ref2.name,\n          action = _ref2.action;\n      return this._post({\n        uri: 'r/' + this.subreddit.display_name + '/api/wiki/alloweditor/' + action,\n        form: {\n          page: this.title,\n          username: name\n        }\n      });\n    }\n    /**\n    * @summary Makes the given user an approved editor of this wiki page.\n    * @param {object} options\n    * @param {string} options.name The name of the user to be added\n    * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n    * @example r.getSubreddit('snoowrap').getWikiPage('index').addEditor({name: 'actually_an_aardvark'})\n    */\n\n  }, {\n    key: \"addEditor\",\n    value: function addEditor(_ref3) {\n      var name = _ref3.name;\n      return this._modifyEditor({\n        name: name,\n        action: 'add'\n      }).return(this);\n    }\n    /**\n    * @summary Revokes this user's approved editor status for this wiki page\n    * @param {object} options\n    * @param {string} options.name The name of the user to be removed\n    * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n    * @example r.getSubreddit('snoowrap').getWikiPage('index').removeEditor({name: 'actually_an_aardvark'})\n    */\n\n  }, {\n    key: \"removeEditor\",\n    value: function removeEditor(_ref4) {\n      var name = _ref4.name;\n      return this._modifyEditor({\n        name: name,\n        action: 'del'\n      }).return(this);\n    }\n    /**\n    * @summary Edits this wiki page, or creates it if it does not exist yet.\n    * @param {object} options\n    * @param {string} options.text The new content of the page, in markdown.\n    * @param {string} [options.reason] The edit reason that will appear in this page's revision history. 256 characters max\n    * @param {string} [options.previousRevision] Determines which revision this edit should be added to. If this parameter is\n    omitted, this edit is simply added to the most recent revision.\n    * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n    * @example r.getSubreddit('snoowrap').getWikiPage('index').edit({text: 'Welcome', reason: 'Added a welcome message'})\n    */\n\n  }, {\n    key: \"edit\",\n    value: function edit(_ref5) {\n      var text = _ref5.text,\n          reason = _ref5.reason,\n          previous_revision = _ref5.previous_revision,\n          _ref5$previousRevisio = _ref5.previousRevision,\n          previousRevision = _ref5$previousRevisio === undefined ? previous_revision : _ref5$previousRevisio;\n      return this._post({\n        uri: 'r/' + this.subreddit.display_name + '/api/wiki/edit',\n        form: {\n          content: text,\n          page: this.title,\n          previous: previousRevision,\n          reason: reason\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Gets a list of revisions for this wiki page.\n    * @param {object} [options] Options for the resulting Listing\n    * @returns {Promise} A Listing containing revisions of this page\n    * @example\n    *\n    * r.getSubreddit('snoowrap').getRevisions({limit: 1}).then(console.log)\n    * // => Listing [\n    * //  {\n    * //    timestamp: 1460973194,\n    * //    reason: 'Added a welcome message',\n    * //    author: RedditUser { name: 'not_an_aardvark', id: 'k83md', ... },\n    * //    page: 'index',\n    * //    id: '506370b4-0508-11e6-b550-0e69f29e0c4d'\n    * //  }\n    * // ]\n    */\n\n  }, {\n    key: \"getRevisions\",\n    value: function getRevisions(options) {\n      return this._getListing({\n        uri: 'r/' + this.subreddit.display_name + '/wiki/revisions/' + this.title,\n        qs: options\n      });\n    }\n    /**\n    * @summary Hides the given revision from this page's public revision history.\n    * @param {object} options\n    * @param {string} options.id The revision's id\n    * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n    * @example r.getSubreddit('snoowrap').getWikiPage('index').hideRevision({id: '506370b4-0508-11e6-b550-0e69f29e0c4d'})\n    */\n\n  }, {\n    key: \"hideRevision\",\n    value: function hideRevision(_ref6) {\n      var id = _ref6.id;\n      return this._post({\n        uri: 'r/' + this.subreddit.display_name + '/api/wiki/hide',\n        qs: {\n          page: this.title,\n          revision: id\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Reverts this wiki page to the given point.\n    * @param {object} options\n    * @param {string} options.id The id of the revision that this page should be reverted to\n    * @returns {Promise} A Promise that fulfills with this WikiPage when the request is complete\n    * @example r.getSubreddit('snoowrap').getWikiPage('index').revert({id: '506370b4-0508-11e6-b550-0e69f29e0c4d'})\n    */\n\n  }, {\n    key: \"revert\",\n    value: function revert(_ref7) {\n      var id = _ref7.id;\n      return this._post({\n        uri: 'r/' + this.subreddit.display_name + '/api/wiki/revert',\n        qs: {\n          page: this.title,\n          revision: id\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Gets a list of discussions about this wiki page.\n    * @param {object} [options] Options for the resulting Listing\n    * @returns {Promise} A Listing containing discussions about this page\n    * @example\n    *\n    * r.getSubreddit('snoowrap').getWikiPage('index').getDiscussions().then(console.log)\n    * // => Listing [\n    * //  Submission { ... },\n    * //  Submission { ... },\n    * //  ...\n    * // ]\n    */\n\n  }, {\n    key: \"getDiscussions\",\n    value: function getDiscussions(options) {\n      return this._getListing({\n        uri: 'r/' + this.subreddit.display_name + '/wiki/discussions/' + this.title,\n        qs: options\n      });\n    }\n  }, {\n    key: \"_uri\",\n    get: function get() {\n      return 'r/' + this.subreddit.display_name + '/wiki/' + this.title;\n    }\n  }]);\n\n  return WikiPage;\n}(_RedditContent2.default);\n\nexports.default = WikiPage;","map":null,"metadata":{},"sourceType":"script"}