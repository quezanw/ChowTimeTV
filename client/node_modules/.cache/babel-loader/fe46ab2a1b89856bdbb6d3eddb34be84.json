{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/defineProperty\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBrowser = exports.formatLivethreadPermissions = exports.formatModPermissions = undefined;\n\nvar _snakeCase2 = require('lodash/snakeCase');\n\nvar _snakeCase3 = _interopRequireDefault(_snakeCase2);\n\nvar _remove2 = require('lodash/remove');\n\nvar _remove3 = _interopRequireDefault(_remove2);\n\nvar _property2 = require('lodash/property');\n\nvar _property3 = _interopRequireDefault(_property2);\n\nvar _partial2 = require('lodash/partial');\n\nvar _partial3 = _interopRequireDefault(_partial2);\n\nvar _omit2 = require('lodash/omit');\n\nvar _omit3 = _interopRequireDefault(_omit2);\n\nvar _keyBy2 = require('lodash/keyBy');\n\nvar _keyBy3 = _interopRequireDefault(_keyBy2);\n\nvar _isEmpty2 = require('lodash/isEmpty');\n\nvar _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\nvar _includes2 = require('lodash/includes');\n\nvar _includes3 = _interopRequireDefault(_includes2);\n\nvar _find2 = require('lodash/find');\n\nvar _find3 = _interopRequireDefault(_find2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.getEmptyRepliesListing = getEmptyRepliesListing;\nexports.addEmptyRepliesListing = addEmptyRepliesListing;\nexports.handleJsonErrors = handleJsonErrors;\nexports.findMessageInTree = findMessageInTree;\nexports.formatPermissions = formatPermissions;\nexports.renameKey = renameKey;\nexports.buildRepliesTree = buildRepliesTree;\nexports.addFullnamePrefix = addFullnamePrefix;\nexports.hasFullnamePrefix = hasFullnamePrefix;\nexports.addSnakeCaseShadowProps = addSnakeCaseShadowProps;\nexports.defineInspectFunc = defineInspectFunc;\nexports.requiredArg = requiredArg;\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _constants = require('./constants.js');\n\nvar _More = require('./objects/More.js');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* @summary Returns an unfetched empty replies Listing for an item.\n* @param {Comment|Submission|PrivateMessage} item An item without a replies Listing\n* @returns {Listing} The empty replies Listing\n* @api private\n*/\n\n\nfunction getEmptyRepliesListing(item) {\n  if (item.constructor._name === 'Comment') {\n    return item._r._newObject('Listing', {\n      _uri: 'comments/' + (item.link_id || item.parent_id).slice(3),\n      _query: {\n        comment: item.name.slice(3)\n      },\n      _transform: (0, _property3.default)('comments[0].replies'),\n      _link_id: item.link_id,\n      _isCommentList: true\n    });\n  }\n\n  if (item.constructor._name === 'Submission') {\n    return item._r._newObject('Listing', {\n      _uri: 'comments/' + item.id,\n      _transform: (0, _property3.default)('comments'),\n      _isCommentList: true\n    });\n  }\n\n  return item._r._newObject('Listing');\n}\n/**\n* @summary Adds an empty replies Listing to an item.\n* @param {Comment|PrivateMessage} item\n* @returns {Comment|PrivateMessage} The item with the new replies Listing\n* @api private\n*/\n\n\nfunction addEmptyRepliesListing(item) {\n  item.replies = getEmptyRepliesListing(item);\n  return item;\n}\n\nfunction handleJsonErrors(returnValue) {\n  return function (response) {\n    if ((0, _isEmpty3.default)(response) || (0, _isEmpty3.default)(response.json.errors)) {\n      return returnValue;\n    }\n\n    throw new Error(response.json.errors[0]);\n  };\n}\n/**\n* @summary Performs a depth-first search of a tree of private messages, in order to find a message with a given name.\n* @param {String} desiredName The fullname of the desired message\n* @param {PrivateMessage} rootNode The root message of the tree\n* @returns {PrivateMessage} The PrivateMessage with the given fullname, or undefined if it was not found in the tree.\n* @api private\n*/\n\n\nfunction findMessageInTree(desiredName, rootNode) {\n  return rootNode.name === desiredName ? rootNode : (0, _find3.default)(rootNode.replies.map((0, _partial3.default)(findMessageInTree, desiredName)));\n}\n/**\n* @summary Formats permissions into a '+'/'-' string\n* @param {String[]} allPermissionNames All possible permissions in this category\n* @param {String[]} permsArray The permissions that should be enabled\n* @returns {String} The permissions formatted into a '+'/'-' string\n* @api private\n*/\n\n\nfunction formatPermissions(allPermissionNames, permsArray) {\n  return permsArray ? allPermissionNames.map(function (type) {\n    return ((0, _includes3.default)(permsArray, type) ? '+' : '-') + type;\n  }).join(',') : '+all';\n}\n\nvar formatModPermissions = exports.formatModPermissions = (0, _partial3.default)(formatPermissions, _constants.MODERATOR_PERMISSIONS);\nvar formatLivethreadPermissions = exports.formatLivethreadPermissions = (0, _partial3.default)(formatPermissions, _constants.LIVETHREAD_PERMISSIONS);\n/**\n* @summary Renames a key on an object, omitting the old key\n* @param {Object} obj\n* @param oldKey {String}\n* @param newKey {String}\n* @returns {Object} A version of the object with the key renamed\n* @api private\n*/\n\nfunction renameKey(obj, oldKey, newKey) {\n  return obj && (0, _omit3.default)(_extends({}, obj, _defineProperty({}, newKey, obj[oldKey])), oldKey);\n}\n/**\n* @summary Builds a replies tree from a list of child comments or messages\n* @desc When reddit returns private messages (or comments from the /api/morechildren endpoint), it arranges their in a very\nnonintuitive way (see https://github.com/not-an-aardvark/snoowrap/issues/15 for details). This function rearranges the message\ntree so that replies are threaded properly.\n* @param {Array} childList The list of child comments\n* @returns {Array} The resulting list of child comments, arranged into a tree.\n* @api private\n*/\n\n\nfunction buildRepliesTree(childList) {\n  var childMap = (0, _keyBy3.default)(childList, 'name');\n  childList.forEach(addEmptyRepliesListing);\n  childList.filter(function (child) {\n    return child.constructor._name === 'Comment';\n  }).forEach(function (child) {\n    return child.replies._more = _More.emptyChildren;\n  });\n  (0, _remove3.default)(childList, function (child) {\n    return childMap[child.parent_id];\n  }).forEach(function (child) {\n    if (child.constructor._name === 'More') {\n      childMap[child.parent_id].replies._setMore(child);\n\n      child.link_id = childMap[child.parent_id].link_id;\n    } else {\n      childMap[child.parent_id].replies.push(child);\n    }\n  });\n  return childList;\n}\n/**\n* @summary Adds a fullname prefix to an item, if it doesn't have a prefix already. If the item is a RedditContent object, gets\nthe item's fullname.\n* @param {String|RedditContent} item\n* @returns {String}\n* @api private\n*/\n\n\nfunction addFullnamePrefix(item, prefix) {\n  if (typeof item === 'string') {\n    return hasFullnamePrefix(item) ? item : prefix + item;\n  }\n\n  return item.name;\n}\n/**\n* @summary Determines whether a string is a \"fullname\". A \"fullname\" starts with \"t1_\", \"t2_\", ... \"t8_\", or \"LiveUpdateEvent_\".\n* @param {String} item\n* @returns {boolean}\n* @api private\n*/\n\n\nfunction hasFullnamePrefix(item) {\n  return /^(t\\d|LiveUpdateEvent)_/.test(item);\n}\n/**\n* @summary Adds snake_case getters and setters to an object\n* @desc All of snoowrap's functions and object options used to be defined in snake_case. For backwards compatibility,\nsnake_case property names (e.g. for the snoowrap constructor) are still supported. This function adds snake_case getters and\nsetters to a camelCase object, such that accessing and setting the snake_case property also correctly set the camelCase version\nof the property.\n* @param {object} obj The object that should have getters/setters attached\n* @returns The updated version of `obj`\n* @api private\n*/\n\n\nfunction addSnakeCaseShadowProps(obj) {\n  Object.keys(obj).filter(function (key) {\n    return !key.startsWith('_') && key !== (0, _snakeCase3.default)(key);\n  }).forEach(function (key) {\n    Object.defineProperty(obj, (0, _snakeCase3.default)(key), {\n      get: function get() {\n        return obj[key];\n      },\n      set: function set(value) {\n        return obj[key] = value;\n      }\n    });\n  });\n  return obj;\n}\n\nvar isBrowser = exports.isBrowser = typeof self === 'object';\n\nfunction defineInspectFunc(obj, inspectFunc) {\n  if (isBrowser) {\n    return;\n  } // Use the util.inspect.custom symbol if available (Node 6.6.0+)\n\n\n  var inspectKey = _util2.default.inspect && typeof _util2.default.inspect.custom === 'symbol' ? _util2.default.inspect.custom : 'inspect';\n  Object.defineProperty(obj, inspectKey, {\n    writable: true,\n    enumerable: false,\n    value: inspectFunc\n  });\n}\n\nfunction requiredArg(argName) {\n  throw new TypeError('Missing required argument ' + argName);\n}","map":null,"metadata":{},"sourceType":"script"}