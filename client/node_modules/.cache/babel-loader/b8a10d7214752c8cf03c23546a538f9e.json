{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _events = require('events');\n\nvar _helpers = require('../helpers.js');\n\nvar _RedditContent = require('./RedditContent.js');\n\nvar _RedditContent2 = _interopRequireDefault(_RedditContent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar WebSocket = _helpers.isBrowser ? global.WebSocket : require('ws');\nvar api_type = 'json';\n/**\n* A class representing a live reddit thread\n* <style> #LiveThread {display: none} </style>\n* @example\n*\n* // Get a livethread with the given ID\n* r.getLivethread('whrdxo8dg9n0')\n* @desc For the most part, reddit distributes the content of live threads via websocket, rather than through the REST API.\nAs such, snoowrap assigns each fetched LiveThread object a `stream` property, which takes the form of an\n[EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter). To listen for new thread updates, simply\nadd listeners to that emitter.\n\nThe following events can be emitted:\n- `update`: Occurs when a new update has been posted in this thread. Emits a `LiveUpdate` object containing information\nabout the new update.\n- `activity`: Occurs periodically when the viewer count for this thread changes.\n- `settings`: Occurs when the thread's settings change. Emits an object containing the new settings.\n- `delete`: Occurs when an update has been deleted. Emits the ID of the deleted update.\n- `strike`: Occurs when an update has been striken (marked incorrect and crossed out). Emits the ID of the striken update.\n- `embeds_ready`: Occurs when embedded media is now available for a previously-posted update.\n- `complete`: Occurs when this LiveThread has been marked as complete, and no more updates will be sent.\n\n(Note: These event types are mapped directly from reddit's categorization of the updates. The descriptions above are\nparaphrased from reddit's descriptions [here](https://www.reddit.com/dev/api#section_live).)\n\nAs an example, this would log all new livethread updates to the console:\n\n```javascript\nsomeLivethread.stream.on('update', data => {\n  console.log(data.body);\n});\n```\n\n* @extends RedditContent\n*/\n\nvar LiveThread =\n/*#__PURE__*/\nfunction (_RedditContent2$defau) {\n  _inherits(LiveThread, _RedditContent2$defau);\n\n  function LiveThread(options, _r, _hasFetched) {\n    var _this5;\n\n    _classCallCheck(this, LiveThread);\n\n    var _this;\n\n    _this = _this5 = _possibleConstructorReturn(this, _getPrototypeOf(LiveThread).call(this, options, _r, _hasFetched));\n    _this5._rawStream = null;\n    _this5._populatedStream = null;\n\n    if (_hasFetched) {\n      Object.defineProperty(_assertThisInitialized(_assertThisInitialized(_this5)), 'stream', {\n        get: function get() {\n          if (!_this._populatedStream && _this.websocket_url) {\n            _this._setupWebSocket();\n          }\n\n          return _this._populatedStream;\n        }\n      });\n    }\n\n    return _this5;\n  }\n\n  _createClass(LiveThread, [{\n    key: \"_setupWebSocket\",\n    value: function _setupWebSocket() {\n      var _this2 = this;\n\n      this._rawStream = new WebSocket(this.websocket_url);\n      this._populatedStream = new _events.EventEmitter();\n\n      var handler = function handler(data) {\n        var parsed = _this2._r._populate(JSON.parse(data));\n\n        _this2._populatedStream.emit(parsed.type, parsed.payload);\n      };\n\n      if (typeof this._rawStream.on === 'function') {\n        this._rawStream.on('message', handler);\n      } else {\n        this._rawStream.onmessage = function (messageEvent) {\n          return handler(messageEvent.data);\n        };\n      }\n    }\n    /**\n    * @summary Adds a new update to this thread.\n    * @param {string} body The body of the new update\n    * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n    * @example r.getLivethread('whrdxo8dg9n0').addUpdate('Breaking: Someone is reading the snoowrap documentation \\\\o/')\n    */\n\n  }, {\n    key: \"addUpdate\",\n    value: function addUpdate(body) {\n      return this._post({\n        uri: 'api/live/' + this.id + '/update',\n        form: {\n          api_type: api_type,\n          body: body\n        }\n      }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n    * @summary Strikes (marks incorrect and crosses out) the given update.\n    * @param {object} options\n    * @param {string} options.id The ID of the update that should be striked.\n    * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n    * @example r.getLivethread('whrdxo8dg9n0').strikeUpdate({id: 'LiveUpdate_edc34446-faf0-11e5-a1b4-0e858bca33cd'})\n    */\n\n  }, {\n    key: \"strikeUpdate\",\n    value: function strikeUpdate(_ref) {\n      var id = _ref.id;\n      return this._post({\n        uri: 'api/live/' + this.id + '/strike_update',\n        form: {\n          api_type: api_type,\n          id: '' + (id.startsWith('LiveUpdate_') ? '' : 'LiveUpdate_') + id\n        }\n      }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n    * @summary Deletes an update from this LiveThread.\n    * @param {object} options\n    * @param {string} options.id The ID of the LiveUpdate that should be deleted\n    * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n    * @example r.getLivethread('whrdxo8dg9n0').deleteUpdate({id: 'LiveUpdate_edc34446-faf0-11e5-a1b4-0e858bca33cd'})\n    */\n\n  }, {\n    key: \"deleteUpdate\",\n    value: function deleteUpdate(_ref2) {\n      var id = _ref2.id;\n      return this._post({\n        uri: 'api/live/' + this.id + '/delete_update',\n        form: {\n          api_type: api_type,\n          id: '' + (id.startsWith('LiveUpdate_') ? '' : 'LiveUpdate_') + id\n        }\n      }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n    * @summary Gets a list of this LiveThread's contributors\n    * @returns {Promise} An Array containing RedditUsers\n    * @example\n    *\n    * r.getLivethread('whrdxo8dg9n0').getContributors().then(console.log)\n    * // => [\n    * //  RedditUser { permissions: ['edit'], name: 'not_an_aardvark', id: 't2_k83md' },\n    * //  RedditUser { permissions: ['all'], id: 't2_u3l80', name: 'snoowrap_testing' }\n    * // ]\n    */\n\n  }, {\n    key: \"getContributors\",\n    value: function getContributors() {\n      return this._get({\n        uri: 'live/' + this.id + '/contributors'\n      }).then(function (contributors) {\n        return Array.isArray(contributors[0]) ? contributors[0] : contributors;\n      });\n    }\n    /**\n    * @summary Invites a contributor to this LiveThread.\n    * @param {object} options\n    * @param {string} options.name The name of the user who should be invited\n    * @param {Array} options.permissions The permissions that the invited user should receive. This should be an Array containing\n    some combination of `'update', 'edit', 'manage'`. To invite a contributor with full permissions, omit this property.\n    * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n    * @example r.getLivethread('whrdxo8dg9n0').inviteContributor({name: 'actually_an_aardvark', permissions: ['update']})\n    */\n\n  }, {\n    key: \"inviteContributor\",\n    value: function inviteContributor(_ref3) {\n      var name = _ref3.name,\n          permissions = _ref3.permissions;\n      return this._post({\n        uri: 'api/live/' + this.id + '/invite_contributor',\n        form: {\n          api_type: api_type,\n          name: name,\n          permissions: (0, _helpers.formatLivethreadPermissions)(permissions),\n          type: 'liveupdate_contributor_invite'\n        }\n      }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n    * @summary Revokes an invitation for the given user to become a contributor on this LiveThread.\n    * @param {object} options\n    * @param {string} options.name The username of the account whose invitation should be revoked\n    * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n    * @example r.getLivethread('whrdxo8dg9n0').revokeContributorInvite({name: 'actually_an_aardvark'});\n    */\n\n  }, {\n    key: \"revokeContributorInvite\",\n    value: function revokeContributorInvite(_ref4) {\n      var _this3 = this;\n\n      var name = _ref4.name;\n      return this._r.getUser(name).fetch().get('id').then(function (userId) {\n        return _this3._post({\n          uri: 'api/live/' + _this3.id + '/rm_contributor_invite',\n          form: {\n            api_type: api_type,\n            id: 't2_' + userId\n          }\n        });\n      }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n    * @summary Accepts a pending contributor invitation on this LiveThread.\n    * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n    * @example r.getLivethread('whrdxo8dg9n0').acceptContributorInvite()\n    */\n\n  }, {\n    key: \"acceptContributorInvite\",\n    value: function acceptContributorInvite() {\n      return this._post({\n        uri: 'api/live/' + this.id + '/accept_contributor_invite',\n        form: {\n          api_type: api_type\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Abdicates contributor status on this LiveThread.\n    * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n    * @example r.getLivethread('whrdxo8dg9n0').leaveContributor()\n    */\n\n  }, {\n    key: \"leaveContributor\",\n    value: function leaveContributor() {\n      return this._post({\n        uri: 'api/live/' + this.id + '/leave_contributor',\n        form: {\n          api_type: api_type\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Removes the given user from contributor status on this LiveThread.\n    * @param {object} options\n    * @param {string} options.name The username of the account who should be removed\n    * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n    * @example r.getLivethread('whrdxo8dg9n0').removeContributor({name: 'actually_an_aardvark'})\n    */\n\n  }, {\n    key: \"removeContributor\",\n    value: function removeContributor(_ref5) {\n      var _this4 = this;\n\n      var name = _ref5.name;\n      return this._r.getUser(name).fetch().get('id').then(function (userId) {\n        return _this4._post({\n          uri: 'api/live/' + _this4.id + '/rm_contributor',\n          form: {\n            api_type: api_type,\n            id: 't2_' + userId\n          }\n        });\n      }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n    * @summary Sets the permissions of the given contributor.\n    * @param {object} options\n    * @param {string} options.name The name of the user whose permissions should be changed\n    * @param {Array} options.permissions The updated permissions that the user should have. This should be an Array containing\n    some combination of `'update', 'edit', 'manage'`. To give the contributor with full permissions, omit this property.\n    * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n    * @example r.getLivethread('whrdxo8dg9n0').setContributorPermissions({name: 'actually_an_aardvark', permissions: ['edit']})\n    */\n\n  }, {\n    key: \"setContributorPermissions\",\n    value: function setContributorPermissions(_ref6) {\n      var name = _ref6.name,\n          permissions = _ref6.permissions;\n      return this._post({\n        uri: 'api/live/' + this.id + '/set_contributor_permissions',\n        form: {\n          api_type: api_type,\n          name: name,\n          permissions: (0, _helpers.formatLivethreadPermissions)(permissions),\n          type: 'liveupdate_contributor'\n        }\n      }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n    * @summary Edits the settings on this LiveThread.\n    * @param {object} options\n    * @param {string} options.title The title of the thread\n    * @param {string} [options.description] A descriptions of the thread. 120 characters max\n    * @param {string} [options.resources] Information and useful links related to the thread.\n    * @param {boolean} options.nsfw Determines whether the thread is Not Safe For Work\n    * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n    * @example r.getLivethread('whrdxo8dg9n0').editSettings({title: 'My livethread', description: 'an updated description'})\n    */\n\n  }, {\n    key: \"editSettings\",\n    value: function editSettings(_ref7) {\n      var title = _ref7.title,\n          description = _ref7.description,\n          resources = _ref7.resources,\n          nsfw = _ref7.nsfw;\n      return this._post({\n        uri: 'api/live/' + this.id + '/edit',\n        form: {\n          api_type: api_type,\n          description: description,\n          nsfw: nsfw,\n          resources: resources,\n          title: title\n        }\n      }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n    * @summary Permanently closes this thread, preventing any more updates from being added.\n    * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n    * @example r.getLivethread('whrdxo8dg9n0').closeThread()\n    */\n\n  }, {\n    key: \"closeThread\",\n    value: function closeThread() {\n      return this._post({\n        uri: 'api/live/' + this.id + '/close_thread',\n        form: {\n          api_type: api_type\n        }\n      }).return(this);\n    }\n    /**\n    * @summary Reports this LiveThread for breaking reddit's rules.\n    * @param {object} options\n    * @param {string} options.reason The reason for the report. One of `spam`, `vote-manipulation`, `personal-information`,\n    `sexualizing-minors`, `site-breaking`\n    * @returns {Promise} A Promise that fulfills with this LiveThread when the request is complete\n    * @example r.getLivethread('whrdxo8dg9n0').report({reason: 'Breaking a rule blah blah blah'})\n    */\n\n  }, {\n    key: \"report\",\n    value: function report(_ref8) {\n      var reason = _ref8.reason;\n      return this._post({\n        uri: 'api/live/' + this.id + '/report',\n        form: {\n          api_type: api_type,\n          type: reason\n        }\n      }).then((0, _helpers.handleJsonErrors)(this));\n    }\n    /**\n    * @summary Gets a Listing containing past updates to this LiveThread.\n    * @param {object} [options] Options for the resulting Listing\n    * @returns {Promise} A Listing containing LiveUpdates\n    * @example\n    *\n    * r.getLivethread('whrdxo8dg9n0').getRecentUpdates().then(console.log)\n    * // => Listing [\n    * //  LiveUpdate { ... },\n    * //  LiveUpdate { ... },\n    * //  ...\n    * // ]\n    */\n\n  }, {\n    key: \"getRecentUpdates\",\n    value: function getRecentUpdates(options) {\n      return this._getListing({\n        uri: 'live/' + this.id,\n        qs: options\n      });\n    }\n    /**\n    * @summary Gets a list of reddit submissions linking to this LiveThread.\n    * @param {object} [options] Options for the resulting Listing\n    * @returns {Promise} A Listing containing Submissions\n    * @example\n    *\n    * r.getLivethread('whrdxo8dg9n0').getDiscussions().then(console.log)\n    * // => Listing [\n    * //  Submission { ... },\n    * //  Submission { ... },\n    * //  ...\n    * // ]\n    */\n\n  }, {\n    key: \"getDiscussions\",\n    value: function getDiscussions(options) {\n      return this._getListing({\n        uri: 'live/' + this.id + '/discussions',\n        qs: options\n      });\n    }\n    /**\n    * @summary Stops listening for new updates on this LiveThread.\n    * @desc To avoid memory leaks that can result from open sockets, it's recommended that you call this method when you're\n    finished listening for updates on this LiveThread.\n    *\n    * This should not be confused with {@link LiveThread#closeThread}, which marks the thread as \"closed\" on reddit.\n    * @returns undefined\n    * @example\n    *\n    * var myThread = r.getLivethread('whrdxo8dg9n0');\n    * myThread.stream.on('update', content => {\n    *   console.log(content);\n    *   myThread.closeStream();\n    * })\n    *\n    */\n\n  }, {\n    key: \"closeStream\",\n    value: function closeStream() {\n      if (this._rawStream) {\n        this._rawStream.close();\n      }\n    }\n  }, {\n    key: \"_uri\",\n    get: function get() {\n      return 'live/' + this.id + '/about';\n    }\n  }]);\n\n  return LiveThread;\n}(_RedditContent2.default);\n\nexports.default = LiveThread;","map":null,"metadata":{},"sourceType":"script"}