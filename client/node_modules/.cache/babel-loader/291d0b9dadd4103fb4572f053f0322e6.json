{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/quezan/Desktop/ChowTimeTV/client/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.modActionStates = exports.conversationStates = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _RedditContent = require('./RedditContent.js');\n\nvar _RedditContent2 = _interopRequireDefault(_RedditContent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar conversationStates = exports.conversationStates = Object.freeze({\n  New: 0,\n  InProgress: 1,\n  Archived: 2\n});\nvar modActionStates = exports.modActionStates = Object.freeze({\n  Highlight: 0,\n  UnHighlight: 1,\n  Archive: 2,\n  UnArchive: 3,\n  ReportedToAdmins: 4,\n  Mute: 5,\n  Unmute: 6\n});\n/**\n * A class representing a conversation from new modmail\n * <style> #ModmailConversation {display: none} </style>\n * @example\n *\n * // Get a Modmail Conversation with a given ID\n * r.getNewModmailConversation('75hxt')\n * @extends RedditContent\n */\n\nvar ModmailConversation =\n/*#__PURE__*/\nfunction (_RedditContent2$defau) {\n  _inherits(ModmailConversation, _RedditContent2$defau);\n\n  function ModmailConversation() {\n    _classCallCheck(this, ModmailConversation);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ModmailConversation).apply(this, arguments));\n  }\n\n  _createClass(ModmailConversation, [{\n    key: \"_transformApiResponse\",\n\n    /**\n     * @summary Converts relevant fields in the ModmailConversation to snoowrap models.\n     * @param response API Response\n     * @return {ModmailConversation}\n     * @private\n     */\n    value: function _transformApiResponse(response) {\n      response.conversation.owner = this._r._newObject('Subreddit', {\n        id: response.conversation.owner.id,\n        display_name: response.conversation.owner.displayName\n      });\n      response.conversation.participant = this._r._newObject('ModmailConversationAuthor', response.user.name, true);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = response.conversation.authors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var author = _step.value;\n          author = this._r._newObject('ModmailConversationAuthor', author, true);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var conversationObjects = ModmailConversation._getConversationObjects(response.conversation, response);\n\n      return this._r._newObject('ModmailConversation', _extends({}, conversationObjects, response.conversation), true);\n    }\n    /**\n     * @summary Maps objects to the ModmailConversation\n     * @param conversation The conversation to map objects to\n     * @param response API Response\n     * @return {object}\n     * @private\n     */\n\n  }, {\n    key: \"archive\",\n\n    /**\n     * @summary Archives the ModmailConversation\n     * @return {Promise}\n     * @example\n     *\n     * r.getNewModmailConversation('75hxt').archive()\n     */\n    value: function archive() {\n      return this._post({\n        uri: 'api/mod/conversations/' + this.id + '/archive'\n      });\n    }\n    /**\n     * @summary Unarchives the ModmailConversation\n     * @return {Promise}\n     * @example\n     *\n     * r.getNewModmailConversation('75hxt').unarchive()\n     */\n\n  }, {\n    key: \"unarchive\",\n    value: function unarchive() {\n      return this._post({\n        uri: 'api/mod/conversations/' + this.id + '/unarchive'\n      });\n    }\n    /**\n     * @summary Marks a ModmailConversation as highlighted\n     * @return {Promise}\n     * @example\n     *\n     * r.getNewModmailConversation('75hxt').highlight()\n     */\n\n  }, {\n    key: \"highlight\",\n    value: function highlight() {\n      return this._post({\n        uri: 'api/mod/conversations/' + this.id + '/highlight'\n      });\n    }\n    /**\n     * @summary Removed highligted from a ModmailConversation\n     * @return {Promise}\n     * @example\n     *\n     * r.getNewModmailConversation('75hxt').unhighlight()\n     */\n\n  }, {\n    key: \"unhighlight\",\n    value: function unhighlight() {\n      return this._delete({\n        uri: 'api/mod/conversations/' + this.id + '/highlight'\n      });\n    }\n    /**\n     * @summary Mute the participant of the ModmailConversation\n     * @return {Promise}\n     * @example\n     *\n     * r.getNewModmailConversation('75hxt').mute()\n     */\n\n  }, {\n    key: \"mute\",\n    value: function mute() {\n      return this._post({\n        uri: 'api/mod/conversations/' + this.id + '/mute'\n      });\n    }\n    /**\n     * @summary Unmute the participant of the ModmailConversation\n     * @return {Promise}\n     * @example\n     *\n     * r.getNewModmailConversation('75hxt').unmute()\n     */\n\n  }, {\n    key: \"unmute\",\n    value: function unmute() {\n      return this._post({\n        uri: 'api/mod/conversations/' + this.id + '/unmute'\n      });\n    }\n    /**\n     * @summary Marks the ModmailConversation as read\n     * @return {Promise}\n     * @example\n     *\n     * r.getNewModmailConversation('75hxt').read()\n     */\n\n  }, {\n    key: \"read\",\n    value: function read() {\n      return this._r.markNewModmailConversationsAsRead([this.id]);\n    }\n    /**\n     * @summary Marks the ModmailConversation as unread\n     * @return {Promise}\n     * @example\n     *\n     * r.getNewModmailConversation('75hxt').unread()\n     */\n\n  }, {\n    key: \"unread\",\n    value: function unread() {\n      return this._r.markNewModmailConversationsAsUnread([this.id]);\n    }\n    /**\n     * @summary Fetches the participant of the conversation\n     * @return {Promise<ModmailConversationAuthor>}\n     * @example\n     *\n     * r.getNewModmailConversation('75hxt').getParticipant().then(console.log)\n     * // ModmailConversationAuthor { muteStatus: {...}, name: \"SpyTec13\", created: '2015-11-22T14:30:38.821292+00:00', ...}\n     */\n\n  }, {\n    key: \"getParticipant\",\n    value: function getParticipant() {\n      var _this = this;\n\n      return this._get({\n        uri: 'api/mod/conversations/' + this.id + '/user'\n      }).then(function (res) {\n        return _this._r._newObject('ModmailConversationAuthor', res, true);\n      });\n    }\n    /**\n     * @summary Returns whether the ModmailConversation is read.\n     * @return {boolean} true, if read. false otherwise\n     */\n\n  }, {\n    key: \"isRead\",\n    value: function isRead() {\n      return this.lastUnread === null;\n    }\n  }, {\n    key: \"_uri\",\n    get: function get() {\n      return 'api/mod/conversations/' + this.id + '?markRead=false';\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.id;\n    }\n  }], [{\n    key: \"_getConversationObjects\",\n    value: function _getConversationObjects(conversation, response) {\n      var conversationObjects = {};\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = conversation.objIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var objId = _step2.value;\n\n          if (!conversationObjects[objId.key]) {\n            conversationObjects[objId.key] = [];\n          }\n\n          conversationObjects[objId.key].push(response[objId.key][objId.id]);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return conversationObjects;\n    }\n  }, {\n    key: \"conversationStates\",\n    get: function get() {\n      return conversationStates;\n    }\n  }, {\n    key: \"modActionStates\",\n    get: function get() {\n      return modActionStates;\n    }\n  }]);\n\n  return ModmailConversation;\n}(_RedditContent2.default);\n\nexports.default = ModmailConversation;","map":null,"metadata":{},"sourceType":"script"}